(function(/*! Brunch !*/) {
  'use strict';

  var globals = typeof window !== 'undefined' ? window : global;
  if (typeof globals.require === 'function') return;

  var modules = {};
  var cache = {};

  var has = function(object, name) {
    return ({}).hasOwnProperty.call(object, name);
  };

  var expand = function(root, name) {
    var results = [], parts, part;
    if (/^\.\.?(\/|$)/.test(name)) {
      parts = [root, name].join('/').split('/');
    } else {
      parts = name.split('/');
    }
    for (var i = 0, length = parts.length; i < length; i++) {
      part = parts[i];
      if (part === '..') {
        results.pop();
      } else if (part !== '.' && part !== '') {
        results.push(part);
      }
    }
    return results.join('/');
  };

  var dirname = function(path) {
    return path.split('/').slice(0, -1).join('/');
  };

  var localRequire = function(path) {
    return function(name) {
      var dir = dirname(path);
      var absolute = expand(dir, name);
      return globals.require(absolute);
    };
  };

  var initModule = function(name, definition) {
    var module = {id: name, exports: {}};
    definition(module.exports, localRequire(name), module);
    var exports = cache[name] = module.exports;
    return exports;
  };

  var require = function(name) {
    var path = expand(name, '.');

    if (has(cache, path)) return cache[path];
    if (has(modules, path)) return initModule(path, modules[path]);

    var dirIndex = expand(path, './index');
    if (has(cache, dirIndex)) return cache[dirIndex];
    if (has(modules, dirIndex)) return initModule(dirIndex, modules[dirIndex]);

    throw new Error('Cannot find module "' + name + '"');
  };

  var define = function(bundle, fn) {
    if (typeof bundle === 'object') {
      for (var key in bundle) {
        if (has(bundle, key)) {
          modules[key] = bundle[key];
        }
      }
    } else {
      modules[bundle] = fn;
    }
  };

  globals.require = require;
  globals.require.define = define;
  globals.require.register = define;
  globals.require.brunch = true;
})();

window.require.register("application", Function('exports, require, module', "var Application, Chaplin, Layout, configurationManager, mapManager, mediator, routes, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nLayout = require('views/layout');\n\nmediator = require('mediator');\n\nmapManager = require('models/TILEDMap');\n\nconfigurationManager = require('core/configurationManager');\n\nroutes = require('routes');\n\nmodule.exports = Application = (function(_super) {\n  __extends(Application, _super);\n\n  function Application() {\n    _ref = Application.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Application.prototype.title = 'shiny wight';\n\n  Application.prototype.initialize = function() {\n    Application.__super__.initialize.apply(this, arguments);\n    this.initDispatcher({\n      controllerSuffix: '-controller'\n    });\n    this.initLayout();\n    this.initMediator();\n    this.initControllers();\n    this.initGameSpecificStuff();\n    this.initRouter(routes);\n    return typeof Object.freeze === \"function\" ? Object.freeze(this) : void 0;\n  };\n\n  Application.prototype.initLayout = function() {\n    return this.layout = new Layout({\n      title: this.title\n    });\n  };\n\n  Application.prototype.initControllers = function() {};\n\n  Application.prototype.initMediator = function() {\n    var _this = this;\n\n    mediator.homepageview = null;\n    mediator.map = null;\n    mediator.soundManager = null;\n    mediator.mapManager = mapManager;\n    mediator.configurationManager = configurationManager;\n    mediator.playWithSounds = false;\n    mediator.factory = {};\n    mediator.levels = {};\n    mediator.activeLevel = '';\n    mediator.nextLevel = '';\n    mediator.std = null;\n    mediator.blockInput = false;\n    mediator.getActiveLevel = function() {\n      return mediator.levels[mediator.activeLevel];\n    };\n    return mediator.seal();\n  };\n\n  Application.prototype.initGameSpecificStuff = function() {\n    (function() {\n      var lastTime, vendors, x;\n\n      lastTime = 0;\n      vendors = [\"ms\", \"moz\", \"webkit\", \"o\"];\n      x = 0;\n      while (x < vendors.length && !window.requestAnimationFrame) {\n        window.requestAnimationFrame = window[vendors[x] + \"RequestAnimationFrame\"];\n        window.cancelAnimationFrame = window[vendors[x] + \"CancelAnimationFrame\"] || window[vendors[x] + \"CancelRequestAnimationFrame\"];\n        ++x;\n      }\n      if (!window.requestAnimationFrame) {\n        window.requestAnimationFrame = function(callback, element) {\n          var currTime, id, timeToCall;\n\n          currTime = new Date().getTime();\n          timeToCall = Math.max(0, 16 - (currTime - lastTime));\n          id = window.setTimeout(function() {\n            return callback(currTime + timeToCall);\n          }, timeToCall);\n          lastTime = currTime + timeToCall;\n          return id;\n        };\n      }\n      if (!window.cancelAnimationFrame) {\n        return window.cancelAnimationFrame = function(id) {\n          return clearTimeout(id);\n        };\n      }\n    })();\n    window.debug = document.location.hash.match(/debug/) && (typeof console !== \"undefined\" && console !== null);\n    window.Logger = window.console;\n    return Object.getPrototypeOf(document.createElement('canvas').getContext('2d')).drawImageTiled = function(img, sx, sy, sw, sh, dx, dy, dw, dh, tileSizeX, tileSizeY) {\n      return this.drawImage(img, sx * tileSizeX, sy * tileSizeY, sw * tileSizeX, sh * tileSizeY, dx * tileSizeX, dy * tileSizeY, dw * tileSizeX, dh * tileSizeY);\n    };\n  };\n\n  return Application;\n\n})(Chaplin.Application);\n\n//@ sourceURL=application.coffee"));
window.require.register("controllers/base/controller", Function('exports, require, module', "var Chaplin, Controller, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nmodule.exports = Controller = (function(_super) {\n  __extends(Controller, _super);\n\n  function Controller() {\n    _ref = Controller.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  return Controller;\n\n})(Chaplin.Controller);\n\n//@ sourceURL=controllers/base/controller.coffee"));
window.require.register("controllers/home-controller", Function('exports, require, module', "var Controller, HomeController, HomePageView, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nController = require('controllers/base/controller');\n\nHomePageView = require('views/home-page-view');\n\nmodule.exports = HomeController = (function(_super) {\n  __extends(HomeController, _super);\n\n  function HomeController() {\n    _ref = HomeController.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  HomeController.prototype.index = function() {\n    return this.view = new HomePageView({\n      gMap: this.gMap\n    });\n  };\n\n  return HomeController;\n\n})(Controller);\n\n//@ sourceURL=controllers/home-controller.coffee"));
window.require.register("core/Entity", Function('exports, require, module', "var Entity, Module, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModule = require('core/Module');\n\nmediator = require('mediator');\n\n/*\nBase class for all entities\n\n@example How to subclass Entity\n  module.exports = class VisibleEntity extends Entity\n    onAction: (object): ->\n      # do something\n*/\n\n\nmodule.exports = Entity = (function(_super) {\n  __extends(Entity, _super);\n\n  /*\n  @property [Object] The entity's position in pixels\n  @option position [Integer] x y coordinate\n  */\n\n\n  Entity.prototype.position = {\n    x: 0,\n    y: 0\n  };\n\n  /*\n  @property [Object] The entity's size\n  */\n\n\n  Entity.prototype.size = {\n    x: 0,\n    y: 0\n  };\n\n  /*\n  @property [Integer]\n  Entity' velocity\n  Standart velocity = 10\n  */\n\n\n  Entity.prototype.velocity = 400;\n\n  Entity.prototype.entityDef = {\n    ellipse: false,\n    type: \"dynamic\",\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    userData: {\n      ent: null\n    }\n  };\n\n  function Entity(x, y, width, height, owningLevel, settings) {\n    this.unblockInput = __bind(this.unblockInput, this);\n    this.blockInput = __bind(this.blockInput, this);\n    this.addTask = __bind(this.addTask, this);\n    this.update = __bind(this.update, this);\n    this.makeMeDynamic = __bind(this.makeMeDynamic, this);\n    this.makeMeStatic = __bind(this.makeMeStatic, this);\n    this.onTouchEnd = __bind(this.onTouchEnd, this);\n    this.onTouchBegin = __bind(this.onTouchBegin, this);\n    this.onTouch = __bind(this.onTouch, this);\n    this.onPositionChange = __bind(this.onPositionChange, this);\n    this.kill = __bind(this.kill, this);\n    this.load = __bind(this.load, this);\n    this.onAction = __bind(this.onAction, this);\n    this.loadSettings = __bind(this.loadSettings, this);\n    var content, prop;\n\n    Entity.__super__.constructor.apply(this, arguments);\n    this.loadMethods = [];\n    this.updateMethods = [];\n    this.unloadMethods = [];\n    this.onTouchMethods = [];\n    this.onTouchEndMethods = [];\n    this.onTouchBeginMethods = [];\n    for (prop in settings) {\n      content = settings[prop];\n      this[prop] = content;\n    }\n    this.level = owningLevel;\n    this.creationTime = Date.now();\n    this.position = {\n      x: x,\n      y: y\n    };\n    this.size.x = width;\n    this.size = {\n      x: width,\n      y: height\n    };\n    this.entityDef = {\n      ellipse: false,\n      type: \"dynamic\",\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      userData: {\n        ent: null\n      }\n    };\n    this.entityDef.x = this.position.x;\n    this.entityDef.y = this.position.y;\n    this.entityDef.width = width;\n    this.entityDef.height = height;\n    this.entityDef.userData.ent = this;\n    if (settings.ellipse) {\n      this.entityDef.ellipse = true;\n    }\n    if (settings.physicsType) {\n      this.entityDef.type = settings.physicsType;\n    }\n    if (settings.isSensor) {\n      this.entityDef.isSensor = true;\n    }\n    this.physBody = this.level.physicsManager.addBody(this.entityDef, this.level.b2World);\n    this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(0, 0));\n  }\n\n  Entity.prototype.loadSettings = function(settings) {\n    var content, prop, _results;\n\n    _results = [];\n    for (prop in settings) {\n      content = settings[prop];\n      _results.push(this[prop] = content);\n    }\n    return _results;\n  };\n\n  /*\n  Is called if the Player stands in front of this Entity and want's to interact with it.\n  @param [Object] player\n    The Player.\n  */\n\n\n  Entity.prototype.onAction = function(player) {};\n\n  Entity.prototype.load = function() {\n    var method, _i, _len, _ref, _results;\n\n    _ref = this.loadMethods;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      _results.push(method.apply(this));\n    }\n    return _results;\n  };\n\n  Entity.prototype.kill = function() {\n    var method, _i, _len, _ref;\n\n    _ref = this.unloadMethods;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      method.apply(this);\n    }\n    this.level.physicsManager.world.DestroyBody(this.physBody);\n    return this.level.removeEntity(this);\n  };\n\n  /*\n  Is called when the Entity moved\n  @note removed publish event 'anyEntityhere:moved' for much(!) better performance\n  */\n\n\n  Entity.prototype.onPositionChange = function() {};\n\n  Entity.prototype.onTouch = function() {\n    var method, _i, _len, _ref, _results;\n\n    _ref = this.onTouchMethods;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      _results.push(method.apply(this, arguments));\n    }\n    return _results;\n  };\n\n  Entity.prototype.onTouchBegin = function() {\n    var method, _i, _len, _ref, _results;\n\n    _ref = this.onTouchBeginMethods;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      _results.push(method.apply(this, arguments));\n    }\n    return _results;\n  };\n\n  Entity.prototype.onTouchEnd = function() {\n    var method, _i, _len, _ref, _results;\n\n    _ref = this.onTouchEndMethods;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      _results.push(method.apply(this, arguments));\n    }\n    return _results;\n  };\n\n  Entity.prototype.makeMeStatic = function() {\n    this.oldVelocity = _.clone(this.physBody.GetLinearVelocity());\n    return this.physBody.SetType(Box2D.Dynamics.b2Body.b2_staticBody);\n  };\n\n  Entity.prototype.makeMeDynamic = function() {\n    this.physBody.SetType(Box2D.Dynamics.b2Body.b2_dynamicBody);\n    this.physBody.SetAwake(true);\n    return this.physBody.SetLinearVelocity(this.oldVelocity);\n  };\n\n  /*\n  Is called each tick/frame.\n  */\n\n\n  Entity.prototype.update = function() {\n    var checkPosition, method, _i, _len, _ref, _results;\n\n    checkPosition = false;\n    this.counter += 1;\n    if (this.counter % 10 === 0) {\n      this.counter = 1;\n      if (Date.now() - this.positionCheckTimer > 2000) {\n        checkPosition = true;\n        this.positionCheckTimer === Date.now();\n      }\n    }\n    if (this.physBody.GetPosition().x != null) {\n      this.position.x = this.physBody.GetPosition().x;\n    }\n    if (this.physBody.GetPosition().y != null) {\n      this.position.y = this.physBody.GetPosition().y;\n    }\n    _ref = this.updateMethods;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      method = _ref[_i];\n      _results.push(method.apply(this));\n    }\n    return _results;\n  };\n\n  Entity.prototype.addTask = function(task) {\n    return this.tasks.push(function() {\n      task.apply(this);\n      return true;\n    });\n  };\n\n  Entity.prototype.blockInput = function() {\n    this.tasks.push(function() {\n      require('mediator').blockInput = true;\n      return true;\n    });\n    return this;\n  };\n\n  Entity.prototype.unblockInput = function() {\n    this.tasks.push(function() {\n      require('mediator').blockInput = false;\n      return true;\n    });\n    return this;\n  };\n\n  return Entity;\n\n})(Module);\n\n//@ sourceURL=core/Entity.coffee"));
window.require.register("core/Module", Function('exports, require, module', "var Module, moduleKeywords,\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nmoduleKeywords = ['extended', 'included'];\n\nmodule.exports = Module = (function() {\n  function Module() {}\n\n  Module.extend = function(obj) {\n    var key, value, _ref;\n\n    for (key in obj) {\n      value = obj[key];\n      if (__indexOf.call(moduleKeywords, key) < 0) {\n        this[key] = value;\n      }\n    }\n    if ((_ref = obj.extended) != null) {\n      _ref.apply(this);\n    }\n    return this;\n  };\n\n  Module.include = function(obj) {\n    var key, value, _ref;\n\n    for (key in obj) {\n      value = obj[key];\n      if (__indexOf.call(moduleKeywords, key) < 0) {\n        this.prototype[key] = value;\n      }\n    }\n    if ((_ref = obj.included) != null) {\n      _ref.apply(this);\n    }\n    return this;\n  };\n\n  return Module;\n\n})();\n\n//@ sourceURL=core/Module.coffee"));
window.require.register("core/configurationManager", Function('exports, require, module', "var mapPrefix, mediator, soundPrefix;\n\nmediator = require('mediator');\n\nsoundPrefix = 'sounds/';\n\nmapPrefix = 'map';\n\n/*\n@example\n  mediator.configurationManager.configure player 'Player'\n*/\n\n\nmodule.exports = {\n  configure: function(object, configuration) {\n    if (this[configuration] != null) {\n      this[configuration].apply(object);\n    } else {\n      console.error(\"Configuration \" + configuration + \" not found!\");\n    }\n    return object;\n  },\n  level1: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: ['jtTheme.mp3'],\n      theme: 'level1theme.mp3',\n      backgroundSounds: ['water.mp3', 'fire.mp3', 'wood.mp3']\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level1.json'\n    };\n  },\n  level1prolog: function() {\n    return this.onTouchEndMethods.push(function(body, point, impulse) {\n      var data, that;\n\n      that = this;\n      data = {\n        text: 'Once upon a time, all in the golden afternoon, fully leisurely our hero took a walk. The birds they sing, the fire cracks, what a wonderful day. But slowly one by one, its quaint events were hammered out and now the tale is done. Gee. I heard that before...'\n      };\n      mediator.dialogManager.showDialog(data);\n      return mediator.homepageview.loadLevel('level3');\n    });\n  },\n  level1nickTalking: function() {\n    return this.onTouchEndMethods.push(function(body, point, impulse) {\n      var data, that;\n\n      that = this;\n      data = {\n        speaker: 'Nick Human',\n        text: 'What a wonderful day. Thus lovely noises, and hey; they get louder when I get closer to  them. God is such a genius.'\n      };\n      return mediator.dialogManager.showDialog(data);\n    });\n  },\n  level1event1: function() {\n    this.onTouchBeginMethods.push(function(body, point, impulse) {\n      var that;\n\n      that = this;\n      mediator.homepageview.loadLevel('level3');\n      return that.level.tasks.push(function() {\n        var config, jt, ss;\n\n        jt = ss = {\n          name: 'Yeti',\n          type: 'Yeti',\n          x: 16 * 32,\n          y: 16,\n          width: 32,\n          height: 32,\n          properties: {}\n        };\n        ss.x = 17 * 32;\n        that.jt = that.level.addEntity(jt);\n        that.ss = that.level.addEntity(ss);\n        if (mediator.playWithSounds) {\n          mediator.soundManager.stopAll(config = {\n            themeSound: true,\n            backgroundSounds: true\n          });\n          return mediator.soundManager.playSound(that.level.manifest.sounds.sounds[0], 1, true);\n        }\n      });\n    });\n    return this.onTouchEndMethods.push(function(body, point, impulse) {\n      var dm, jt, player, ss, that,\n        _this = this;\n\n      that = this;\n      player = body.GetUserData().ent;\n      jt = that.jt;\n      ss = that.ss;\n      dm = mediator.dialogManager;\n      dm.hideDialog();\n      jt.blockInput().moveDown(150).moveLeft(60);\n      return jt.addTask(function() {\n        var data;\n\n        data = {\n          speaker: 'JT',\n          text: 'Yo, Snowsome, pathetic human spotted, Yo!'\n        };\n        return dm.showDialog(data, function(result) {\n          return jt.addTask(function() {\n            data.speaker = 'Snowsome';\n            data.text = 'Pathetic little you.';\n            data.options = 'Run!';\n            return dm.showDialog(data, function() {\n              ss.moveDown(150).moveLeft(90);\n              return jt.moveDown(90).moveLeft(30).addTask(function() {\n                data.speaker = 'JT';\n                data.text = 'Nice bro, you got Him';\n                data.options = 'What the...';\n                return dm.showDialog(data, function() {\n                  return jt.addTask(function() {\n                    data.text = 'Nice skin, yo.';\n                    data.options = 'Uhm... Yeah. Thanks? I guess...';\n                    return dm.showDialog(data, function() {\n                      return jt.addTask(function() {\n                        data.text = 'Give it to us';\n                        data.options = null;\n                        return dm.showDialog(data, function() {\n                          return jt.addTask(function() {\n                            data.speaker = 'Snowsome';\n                            data.text = 'Yeah, give it to us.';\n                            data.options = 'Well... I would prefer not to...';\n                            return dm.showDialog(data, function() {\n                              mediator.configurationManager.configure(player, 'PlayerSkeleton');\n                              jt.moveRight(80).moveUp(250);\n                              ss.moveRight(40).moveUp(250);\n                              return jt.addTask(function() {\n                                data = {\n                                  speaker: 'Nick Skeleton',\n                                  text: 'Seriously? Skin-Robbery? Yetis? I hate those days...'\n                                };\n                                return dm.showDialog(data, function() {\n                                  jt.unblockInput().addTask(function() {\n                                    return jt.kill();\n                                  });\n                                  return ss.kill();\n                                });\n                              });\n                            });\n                          });\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  },\n  level2: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level2.json'\n    };\n  },\n  level2house1: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      themeIntensity: 0.3,\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level2house1.json'\n    };\n  },\n  level2house2: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      themeIntensity: 0.3,\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level2house2.json'\n    };\n  },\n  level3: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'underground.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level3.json'\n    };\n  },\n  level4: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'underground.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level4.json'\n    };\n  },\n  level5: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level5.json'\n    };\n  },\n  level6: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level6.json'\n    };\n  },\n  level7: function() {\n    this.sounds = {\n      prefix: soundPrefix,\n      sounds: [],\n      theme: 'level2theme.mp3',\n      backgroundSounds: []\n    };\n    return this.map = {\n      prefix: mapPrefix,\n      file: 'level7.json'\n    };\n  },\n  Player: function() {\n    this.velocity = 200;\n    this.spriteState.viewDirection = 2;\n    this.atlas.src = 'atlases/warrior_m.png';\n    this.tileSet.tilesX = 3;\n    this.tileSet.tilesY = 4;\n    this.tileSet.tileheight = 32;\n    this.tileSet.tilewidth = 32;\n    return this.tileSet.offset = {\n      x: 16,\n      y: 24\n    };\n  },\n  PlayerSkeleton: function() {\n    this.velocity = 250;\n    this.atlas.src = 'atlases/nick.png';\n    this.tileSet.tilesX = 3;\n    this.tileSet.tilesY = 4;\n    this.tileSet.tileheight = 32;\n    this.tileSet.tilewidth = 32;\n    return this.tileSet.offset = {\n      x: 16,\n      y: 24\n    };\n  },\n  Mario: function() {\n    this.atlas.src = 'atlases/mario.png';\n    this.tileSet.tilesX = 3;\n    this.tileSet.tilesY = 4;\n    this.tileSet.tileheight = 32;\n    this.tileSet.tilewidth = 32;\n    return this.tileSet.offset = {\n      x: 14,\n      y: 24\n    };\n  },\n  Yeti: function() {\n    this.velocity = 200;\n    this.atlas.src = 'atlases/yetis.png';\n    this.tileSet.tilesX = 3;\n    this.tileSet.tilesY = 4;\n    this.tileSet.tileheight = 32;\n    this.tileSet.tilewidth = 32;\n    return this.tileSet.offset = {\n      x: 16,\n      y: 24\n    };\n  }\n};\n\n//@ sourceURL=core/configurationManager.coffee"));
window.require.register("core/mixins/Movable", Function('exports, require, module', "module.exports = {\n  _movable_setUp: function(pathToAtlas) {\n    this.movable = true;\n    this.oldPosition = {\n      x: 0,\n      y: 0\n    };\n    this.moving = {\n      up: false,\n      down: false,\n      right: false,\n      left: false\n    };\n    this.maxDistance = 0;\n    this.positionToMoveTo = null;\n    this.onFollow = false;\n    this.counter = 0;\n    this.tryOtherDirection = false;\n    return this.tasks = [];\n  },\n  _movable_init: function() {\n    this.loadMethods.push(this._visual_load);\n    this.updateMethods.push(this._movable_update);\n    return this.positionCheckTimer = Date.now();\n  },\n  _movable_load: function() {},\n  _movable_update: function() {\n    var checkPosition, task;\n\n    checkPosition = false;\n    this.counter += 1;\n    if (this.counter % 10 === 0) {\n      this.counter = 1;\n      if (Date.now() - this.positionCheckTimer > 2000) {\n        checkPosition = this.checkPosition = true;\n        this.positionCheckTimer === Date.now();\n      }\n    } else {\n      task = this.tasks[0];\n      if (task) {\n        if (task.apply(this)) {\n          this.tasks.shift();\n        }\n      } else if (this.onFollow) {\n        this.moveToPosition(this.positionToMoveTo, this.maxDistance);\n      }\n    }\n    if (checkPosition) {\n      return this.oldPosition = _.clone(this.position);\n    }\n  },\n  moveDown: function(pixel) {\n    if (pixel < 0) {\n      console.error('argument must be an positive integer');\n    }\n    this.tasks.push(function() {\n      if (this.moving.down) {\n        if (this.position.y > this.targetPos.y) {\n          this.stopMovement();\n          return true;\n        } else {\n          this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(0, this.velocity));\n          return false;\n        }\n      } else {\n        this.targetPos = {\n          x: this.position.x,\n          y: this.position.y + pixel\n        };\n        this.moving.down = true;\n        this.spriteState.moving = true;\n        this.spriteState.viewDirection = 2;\n        return false;\n      }\n    });\n    return this;\n  },\n  moveUp: function(pixel) {\n    if (pixel < 0) {\n      console.error('argument must be an positive integer');\n    }\n    this.tasks.push(function() {\n      if (this.moving.up) {\n        if (this.position.y < this.targetPos.y) {\n          this.stopMovement();\n          return true;\n        } else {\n          this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(0, -this.velocity));\n          return false;\n        }\n      } else {\n        this.targetPos = {\n          x: this.position.x,\n          y: this.position.y - pixel\n        };\n        this.moving.up = true;\n        this.spriteState.moving = true;\n        this.spriteState.viewDirection = 0;\n        return false;\n      }\n    });\n    return this;\n  },\n  moveRight: function(pixel) {\n    if (pixel < 0) {\n      console.error('argument must be an positive integer');\n    }\n    this.tasks.push(function() {\n      if (this.moving.right) {\n        if (this.position.x > this.targetPos.x) {\n          this.stopMovement();\n          return true;\n        } else {\n          this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(this.velocity, 0));\n          return false;\n        }\n      } else {\n        this.targetPos = {\n          x: this.position.x + pixel,\n          y: this.position.y\n        };\n        this.moving.right = true;\n        this.spriteState.moving = true;\n        this.spriteState.viewDirection = 1;\n        return false;\n      }\n    });\n    return this;\n  },\n  moveLeft: function(pixel) {\n    if (pixel < 0) {\n      console.error('argument must be an positive integer');\n    }\n    this.tasks.push(function() {\n      if (this.moving.left) {\n        if (this.position.x < this.targetPos.x) {\n          this.stopMovement();\n          return true;\n        } else {\n          this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(-this.velocity, 0));\n          return false;\n        }\n      } else {\n        this.targetPos = {\n          x: this.position.x - pixel,\n          y: this.position.y\n        };\n        this.moving.left = true;\n        this.spriteState.moving = true;\n        this.spriteState.viewDirection = 3;\n        return false;\n      }\n    });\n    return this;\n  },\n  stopMovement: function(pixel) {\n    this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(0, 0));\n    this.moving.down = false;\n    this.moving.up = false;\n    this.moving.left = false;\n    this.moving.right = false;\n    return this.spriteState.moving = false;\n  },\n  getActualMoveDistance: function(distance) {\n    if (distance > this.maxDistance) {\n      return this.maxDistance;\n    }\n    return distance;\n  },\n  moveOnXAxis: function(ax, dx) {\n    var distance;\n\n    distance = this.getActualMoveDistance(ax);\n    if (dx > 0) {\n      return this.moveRight(distance);\n    } else {\n      return this.moveLeft(distance);\n    }\n  },\n  moveOnYAxis: function(ay, dy) {\n    var distance;\n\n    distance = this.getActualMoveDistance(ay);\n    if (dy > 0) {\n      return this.moveDown(distance);\n    } else {\n      return this.moveUp(distance);\n    }\n  },\n  moveToPosition: function(positionToMoveTo, maxDistance) {\n    return this.tasks.push(function() {\n      var ax, ay, dx, dy, threshold;\n\n      if (!this.onFollow) {\n        this.positionToMoveTo = positionToMoveTo;\n        this.onFollow = true;\n        this.maxDistance = maxDistance;\n        this.savedTasks = _.clone(this.tasks);\n        this.tasks = [];\n      }\n      threshold = this.velocity / 50;\n      if (threshold < 1) {\n        threshold = 1;\n      }\n      dx = Math.floor(positionToMoveTo.x - this.position.x);\n      dy = Math.floor(positionToMoveTo.y - this.position.y);\n      ax = Math.abs(dx);\n      ay = Math.abs(dy);\n      if ((ax <= threshold && ay <= threshold) || (this.position.x === positionToMoveTo.x && this.position.y === positionToMoveTo.y)) {\n        this.position.x = positionToMoveTo.x;\n        this.position.y = positionToMoveTo.y;\n        this.positionToMoveTo = null;\n        this.onFollow = false;\n        this.tasks = this.savedTasks;\n        return;\n      }\n      if (ax >= ay && !this.tryOtherDirection) {\n        return this.moveOnXAxis(ax, dx);\n      } else if (ax >= ay && this.tryOtherDirection) {\n        this.tryOtherDirection = false;\n        return this.moveOnYAxis(ay, dy);\n      } else if (ax <= ay && !this.tryOtherDirection) {\n        return this.moveOnYAxis(ay, dy);\n      } else if (ax <= ay && this.tryOtherDirection) {\n        this.tryOtherDirection = false;\n        return this.moveOnXAxis(ax, dx);\n      }\n    });\n  }\n};\n\n//@ sourceURL=core/mixins/Movable.coffee"));
window.require.register("core/mixins/Visual", Function('exports, require, module', "module.exports = {\n  _visual_setUp: function(pathToAtlas) {\n    this.visual = true;\n    this.spriteState = {\n      moving: false,\n      viewDirection: 0,\n      animationRate: 100,\n      normal: 1\n    };\n    this.atlas = new Image();\n    if (pathToAtlas) {\n      this.atlas.src = pathToAtlas;\n    }\n    return this.tileSet = {\n      tilesX: 0,\n      tilesY: 0,\n      tileheight: 0,\n      tilewidth: 0,\n      offset: {\n        x: 0,\n        y: 0\n      }\n    };\n  },\n  _visual_init: function() {\n    return this.loadMethods.push(this._visual_load);\n  },\n  _visual_load: function() {},\n  getSpritePacket: function() {\n    var pkt, x, y;\n\n    x = Math.floor((Date.now() - this.creationTime) / this.spriteState.animationRate) % this.tileSet.tilesX;\n    y = this.spriteState.viewDirection;\n    if (!this.spriteState.moving) {\n      x = this.spriteState.normal;\n    }\n    return pkt = {\n      x: x * this.tileSet.tilewidth,\n      y: y * this.tileSet.tileheight\n    };\n  },\n  render: function(ctx, cx, cy) {\n    var dh, dw, dx, dy, sh, spritePkt, sw, sx, sy;\n\n    spritePkt = this.getSpritePacket();\n    sx = spritePkt.x;\n    sy = spritePkt.y;\n    sw = this.tileSet.tilewidth;\n    sh = this.tileSet.tileheight;\n    dx = this.position.x - cx;\n    dy = this.position.y - cy;\n    dw = this.size.x;\n    dh = this.size.y;\n    dx = dx - this.tileSet.offset.x;\n    dy = dy - this.tileSet.offset.y;\n    return ctx.drawImage(this.atlas, sx, sy, sw, sh, dx, dy, dw, dh);\n  }\n};\n\n//@ sourceURL=core/mixins/Visual.coffee"));
window.require.register("initialize", Function('exports, require, module', "var Application;\n\nApplication = require('application');\n\n$(function() {\n  var app;\n\n  app = new Application();\n  return app.initialize();\n});\n\n//@ sourceURL=initialize.coffee"));
window.require.register("lib/support", Function('exports, require, module', "var Chaplin, support, utils;\n\nChaplin = require('chaplin');\n\nutils = require('lib/utils');\n\nsupport = utils.beget(Chaplin.support);\n\nmodule.exports = support;\n\n//@ sourceURL=lib/support.coffee"));
window.require.register("lib/utils", Function('exports, require, module', "var Chaplin, utils;\n\nChaplin = require('chaplin');\n\nutils = Chaplin.utils.beget(Chaplin.utils);\n\nmodule.exports = utils;\n\n//@ sourceURL=lib/utils.coffee"));
window.require.register("lib/view-helper", Function('exports, require, module', "var mediator,\n  __slice = [].slice;\n\nmediator = require('mediator');\n\nHandlebars.registerHelper('with', function(context, options) {\n  if (!context || Handlebars.Utils.isEmpty(context)) {\n    return options.inverse(this);\n  } else {\n    return options.fn(context);\n  }\n});\n\nHandlebars.registerHelper('without', function(context, options) {\n  var inverse;\n\n  inverse = options.inverse;\n  options.inverse = options.fn;\n  options.fn = inverse;\n  return Handlebars.helpers[\"with\"].call(this, context, options);\n});\n\nHandlebars.registerHelper('url', function() {\n  var params, routeName, url;\n\n  routeName = arguments[0], params = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n  url = null;\n  mediator.publish('!router:reverse', routeName, params, function(result) {\n    return url = result;\n  });\n  return \"/\" + url;\n});\n\n//@ sourceURL=lib/view-helper.coffee"));
window.require.register("mediator", Function('exports, require, module', "module.exports = require('chaplin').mediator;\n\n//@ sourceURL=mediator.coffee"));
window.require.register("models/DeadEntity", Function('exports, require, module', "var DeadEntity, VisibleEntity, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nVisibleEntity = require('models/VisibleEntity');\n\nmodule[\"extends\"] = DeadEntity = (function(_super) {\n  __extends(DeadEntity, _super);\n\n  function DeadEntity() {\n    _ref = DeadEntity.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  return DeadEntity;\n\n})(VisibleEntity);\n\n//@ sourceURL=models/DeadEntity.coffee"));
window.require.register("models/DialogManager", Function('exports, require, module', "var DialogManager, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nmediator = require('mediator');\n\nmodule.exports = DialogManager = (function() {\n  function DialogManager() {\n    this.unblockInput = __bind(this.unblockInput, this);\n    this.blockInput = __bind(this.blockInput, this);\n    this.hideDialog = __bind(this.hideDialog, this);\n    this.showDialog = __bind(this.showDialog, this);\n    this.isDialog = __bind(this.isDialog, this);\n    this._chooseCurrentSelection = __bind(this._chooseCurrentSelection, this);\n    this._selectOption = __bind(this._selectOption, this);\n    this.moveSelectionUp = __bind(this.moveSelectionUp, this);\n    this.moveSelectionDown = __bind(this.moveSelectionDown, this);    this.source = document.getElementById('dialog-template');\n    this.template = Handlebars.compile(this.source.innerText);\n    this.canvas = document.getElementById('game-canvas');\n    this.$dialog = $('#dialog');\n    this.currentSelection = 1;\n    mediator.dialogManager = this;\n    this.didIBlock = false;\n    this.selectOption = _.debounce(this._selectOption, 50, true);\n    this.chooseCurrentSelection = _.debounce(this._chooseCurrentSelection, 50, true);\n  }\n\n  DialogManager.prototype.moveSelectionDown = function() {\n    return this.selectOption(this.currentSelection + 1);\n  };\n\n  DialogManager.prototype.moveSelectionUp = function() {\n    return this.selectOption(this.currentSelection - 1);\n  };\n\n  DialogManager.prototype._selectOption = function(optNum) {\n    var options;\n\n    options = this.$dialog.children().children();\n    if (optNum < 1) {\n      optNum = options.length - 1;\n    }\n    optNum = ((optNum - 1) % (options.length - 1)) + 1;\n    options.removeClass('dialog-option-hovered');\n    options.eq(optNum).addClass('dialog-option-hovered');\n    return this.currentSelection = optNum;\n  };\n\n  DialogManager.prototype._chooseCurrentSelection = function() {\n    return this.$dialog.children().children().eq(this.currentSelection).click();\n  };\n\n  DialogManager.prototype.isDialog = function() {\n    return this.$dialog.children().length !== 0;\n  };\n\n  DialogManager.prototype.showDialog = function(data, callback) {\n    var result, that;\n\n    if (this.isDialog()) {\n      console.error(\"I'm already showing a dialog, so you must be doing something wrong!\");\n      this.hideDialog();\n    }\n    this.blockInput();\n    result = $(this.template(data));\n    that = this;\n    result.children('.dialog-option').click(function(event) {\n      var id;\n\n      that.hideDialog();\n      id = parseInt($(this).prop('id')) + 1;\n      if (id === NaN) {\n        id = -1;\n      }\n      return typeof callback === \"function\" ? callback(id) : void 0;\n    });\n    $('#dialog').append(result).css('left', 0).css('top', this.canvas.height + 2).css('width', this.canvas.width).fadeIn();\n    return this.selectOption(1);\n  };\n\n  DialogManager.prototype.hideDialog = function() {\n    $('#dialog').empty();\n    return this.unblockInput();\n  };\n\n  DialogManager.prototype.blockInput = function() {\n    if (mediator.blockInput) {\n      this.didIBlock = false;\n    } else {\n      this.didIBlock = true;\n    }\n    return mediator.blockInput = true;\n  };\n\n  DialogManager.prototype.unblockInput = function() {\n    if (this.didIBlock) {\n      mediator.blockInput = false;\n      return this.didIBlock = false;\n    }\n  };\n\n  return DialogManager;\n\n})();\n\n//@ sourceURL=models/DialogManager.coffee"));
window.require.register("models/Event", Function('exports, require, module', "var Entity, Event, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEntity = require('core/Entity');\n\nmediator = require('mediator');\n\nmodule.exports = Event = (function(_super) {\n  __extends(Event, _super);\n\n  mediator.factory['Event'] = Event;\n\n  function Event(x, y, width, height, owningLevel, settings) {\n    this.onTouchEnd = __bind(this.onTouchEnd, this);\n    this.onTouchBegin = __bind(this.onTouchBegin, this);\n    this.onTouch = __bind(this.onTouch, this);    settings.physicsType = 'static';\n    settings.isSensor = true;\n    Event.__super__.constructor.call(this, x, y, width, height, owningLevel, settings);\n    this.repeat = false;\n  }\n\n  Event.prototype.onTouch = function() {\n    Event.__super__.onTouch.apply(this, arguments);\n    if (!this.repeat) {\n      return this.onTouchMethods = [];\n    }\n  };\n\n  Event.prototype.onTouchBegin = function() {\n    Event.__super__.onTouchBegin.apply(this, arguments);\n    if (!this.repeat) {\n      return this.onTouchBeginMethods = [];\n    }\n  };\n\n  Event.prototype.onTouchEnd = function() {\n    Event.__super__.onTouchEnd.apply(this, arguments);\n    if (!this.repeat) {\n      return this.onTouchEndMethods = [];\n    }\n  };\n\n  return Event;\n\n})(Entity);\n\n//@ sourceURL=models/Event.coffee"));
window.require.register("models/InputManager", Function('exports, require, module', "var InputManager, Model, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModel = require('models/base/model');\n\nmodule.exports = InputManager = (function(_super) {\n  __extends(InputManager, _super);\n\n  function InputManager() {\n    this.bind = __bind(this.bind, this);\n    this.onKeyUpEvent = __bind(this.onKeyUpEvent, this);\n    this.onKeyDownEvent = __bind(this.onKeyDownEvent, this);\n    this.initialize = __bind(this.initialize, this);    _ref = InputManager.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  InputManager.prototype.defaults = {\n    bindings: {},\n    actions: {},\n    presses: {},\n    locks: {},\n    delayedKeyup: [],\n    keyCodes: {\n      'a': 65,\n      'w': 87,\n      'd': 68,\n      's': 83,\n      'arrowLeft': 37,\n      'arrowUp': 38,\n      'arrowRight': 39,\n      'arrowDown': 40,\n      'enter': 13,\n      'escape': 27,\n      'space': 32\n    }\n  };\n\n  InputManager.prototype.initialize = function() {\n    var keyCodes;\n\n    keyCodes = this.get('keyCodes');\n    this.bind(keyCodes['w'], 'move-up');\n    this.bind(keyCodes['a'], 'move-left');\n    this.bind(keyCodes['s'], 'move-down');\n    this.bind(keyCodes['d'], 'move-right');\n    this.bind(keyCodes['arrowUp'], 'move-up');\n    this.bind(keyCodes['arrowLeft'], 'move-left');\n    this.bind(keyCodes['arrowDown'], 'move-down');\n    this.bind(keyCodes['arrowRight'], 'move-right');\n    this.bind(keyCodes['enter'], 'interact');\n    this.bind(keyCodes['space'], 'interact');\n    this.bind(keyCodes['escape'], 'cancel');\n    window.addEventListener('keydown', this.onKeyDownEvent);\n    window.addEventListener('keyup', this.onKeyUpEvent);\n    return this.otherKeyPressed = false;\n  };\n\n  /*\n  Set the corresponding action in the actions array to true\n  \n      Pressing `w` will set `move-up` to true on an qwerty keyboard\n  @params [Event] event Event Object\n  */\n\n\n  InputManager.prototype.onKeyDownEvent = function(event) {\n    var action, actions, bindings, code;\n\n    code = event['keyCode'];\n    if (this.otherKeyPressed) {\n      this.onKeyUpEvent(this.otherKeyPressed);\n    }\n    bindings = this.get('bindings');\n    actions = this.get('actions');\n    action = bindings[code];\n    if (action) {\n      actions[action] = true;\n    }\n    this.set({\n      'actions': actions\n    });\n    return this.otherKeyPressed = event;\n  };\n\n  /*\n  Set the corresponding action in the actions array to false\n  \n      Releasing `w` will set `move-up` to false on an qwerty keyboard\n  @params [Event] event Event Object\n  */\n\n\n  InputManager.prototype.onKeyUpEvent = function(event) {\n    var action, actions, bindings, code;\n\n    bindings = this.get('bindings');\n    actions = this.get('actions');\n    code = event['keyCode'];\n    action = bindings[code];\n    if (action) {\n      actions[action] = false;\n    }\n    return this.set({\n      'actions': actions\n    });\n  };\n\n  /*\n  Bind a key code to an action.\n  @example How to bind `w` to the `move-up` action\n    @bind 87, 'move-up'\n  */\n\n\n  InputManager.prototype.bind = function(key, action) {\n    var bindings;\n\n    bindings = this.get('bindings');\n    return bindings[key] = action;\n  };\n\n  return InputManager;\n\n})(Model);\n\n//@ sourceURL=models/InputManager.coffee"));
window.require.register("models/Level", Function('exports, require, module', "var Level, Model, PhysicsManager, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModel = require('models/base/model');\n\nPhysicsManager = require('models/PhysicsManager');\n\nmediator = require('mediator');\n\nmodule.exports = Level = (function(_super) {\n  __extends(Level, _super);\n\n  function Level(manifestId, _callback) {\n    var _this = this;\n\n    this._callback = _callback;\n    this.updatePhysics = __bind(this.updatePhysics, this);\n    this.update = __bind(this.update, this);\n    this.createEntity = __bind(this.createEntity, this);\n    this.removeEntity = __bind(this.removeEntity, this);\n    this.addEntity = __bind(this.addEntity, this);\n    this.initialSpawn = __bind(this.initialSpawn, this);\n    this.checkIfDone = __bind(this.checkIfDone, this);\n    this.setup = __bind(this.setup, this);\n    this.manifest = null;\n    this.tasks = [];\n    this.mapSoundList = {};\n    this.backgroundSoundList = {};\n    this.soundTheme = null;\n    this.soundCount = 0;\n    this.physicsManager;\n    this.entities = {};\n    this.entityObjects = [];\n    this.player = null;\n    this.bodyCount = 0;\n    this.mapCanvas = null;\n    this.mapTiledObject = null;\n    this.tileSets = null;\n    this.bodiesLoaded = false;\n    this.mapLoaded = false;\n    this.loadCompleted = false;\n    this.setupped = false;\n    this.manifest = mediator.configurationManager.configure({}, manifestId);\n    mediator.std.xhrGet(this.manifest.map.prefix + '/' + this.manifest.map.file, function(data) {\n      _this.mapTiledObject = JSON.parse(data.target.responseText);\n      mediator.mapManager.parse(_this.mapTiledObject, function(map, tileSets) {\n        _this.mapCanvas = map;\n        _this.tileSets = tileSets;\n        _this.mapTiledObject.processedTileSets = _this.tileSets;\n        _this.mapLoaded = true;\n        _this.physicsManager = new PhysicsManager(_this.mapTiledObject);\n        _this.physicsManager.addContactListener({\n          PostSolve: function(bodyA, bodyB, impulse) {\n            var dataA, dataB;\n\n            dataA = bodyA.GetUserData();\n            dataB = bodyB.GetUserData();\n            if (dataA != null) {\n              dataA.ent.onTouch(bodyB, null, impulse);\n            }\n            return dataB != null ? dataB.ent.onTouch(bodyA, null, impulse) : void 0;\n          },\n          BeginContact: function(bodyA, bodyB) {\n            var dataA, dataB;\n\n            dataA = bodyA.GetUserData();\n            dataB = bodyB.GetUserData();\n            if (dataA != null) {\n              dataA.ent.onTouchBegin(bodyB, null);\n            }\n            return dataB != null ? dataB.ent.onTouchBegin(bodyA, null) : void 0;\n          },\n          EndContact: function(bodyA, bodyB) {\n            var dataA, dataB;\n\n            dataA = bodyA.GetUserData();\n            dataB = bodyB.GetUserData();\n            if (dataA != null) {\n              dataA.ent.onTouchEnd(bodyB, null);\n            }\n            return dataB != null ? dataB.ent.onTouchEnd(bodyA, null) : void 0;\n          }\n        });\n        return _this.checkIfDone();\n      });\n      if (mediator.playWithSounds) {\n        _this.soundMap = mediator.soundManager.getSoundMap(_this.mapTiledObject);\n        _this.mapSoundList = _this.manifest.sounds.sounds;\n        _this.backgroundSoundList = _this.manifest.sounds.backgroundSounds;\n        _this.themeSound = _this.manifest.sounds.theme;\n        if (_this.manifest.sounds.themeIntensity != null) {\n          _this.themeIntensity = _this.manifest.sounds.themeIntensity;\n        } else {\n          _this.themeIntensity = 1;\n        }\n        _this.soundCount = _this.mapSoundList.length + _this.backgroundSoundList.length + 1;\n        return mediator.soundManager.loadSounds(_this.manifest.sounds, function() {\n          _this.soundCount--;\n          if (_this.soundCount <= 0) {\n            _this.soundsLoaded = true;\n            return _this.checkIfDone();\n          }\n        });\n      }\n    });\n  }\n\n  Level.prototype.setup = function() {\n    if (this.loadCompleted) {\n      if (!this.setupped) {\n        this.setupped = true;\n        return this.initialSpawn();\n      } else {\n        return console.error(\"Level already set up!\");\n      }\n    } else {\n      return console.error(\"Don't call Level.setup() unless the manifest finished loading!\");\n    }\n  };\n\n  Level.prototype.checkIfDone = function() {\n    if (this.mapLoaded && (this.soundsLoaded || !mediator.playWithSounds)) {\n      if (debug) {\n        console.log(\"Finished loading \" + this.manifest.map.file);\n      }\n      this.loadCompleted = true;\n      if (this._callback) {\n        return this._callback();\n      }\n    }\n  };\n\n  Level.prototype.initialSpawn = function() {\n    var layer, obj, object, _i, _len, _ref, _results;\n\n    _ref = this.mapTiledObject.layers;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      layer = _ref[_i];\n      if (layer.type === 'tilelayer') {\n        continue;\n      }\n      if (layer.name !== 'spawnpoints') {\n        continue;\n      }\n      _results.push((function() {\n        var _j, _len1, _ref1, _results1;\n\n        _ref1 = layer.objects;\n        _results1 = [];\n        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n          object = _ref1[_j];\n          if (object.type === '') {\n            continue;\n          }\n          obj = this.addEntity(object);\n          if (object.type === \"Player\") {\n            _results1.push(this.player = obj);\n          } else {\n            _results1.push(void 0);\n          }\n        }\n        return _results1;\n      }).call(this));\n    }\n    return _results;\n  };\n\n  Level.prototype.addEntity = function(object) {\n    var obj;\n\n    obj = this.createEntity(object);\n    this.entityObjects.push(obj);\n    return obj;\n  };\n\n  Level.prototype.removeEntity = function(entity) {\n    return this.tasks.push(function() {\n      var index;\n\n      index = this.entityObjects.indexOf(entity);\n      return this.entityObjects.splice(index, 1);\n    });\n  };\n\n  Level.prototype.createEntity = function(object) {\n    var Ent, conf, configurator, content, height, obj, prop, width, x, y, _ref;\n\n    Ent = mediator.factory[object.type];\n    if (Object.keys(object.properties).length !== 0) {\n      conf = {};\n      _ref = object.properties;\n      for (prop in _ref) {\n        content = _ref[prop];\n        conf[prop] = content;\n      }\n    }\n    configurator = mediator.configurationManager[object.name];\n    if (!(conf || configurator)) {\n      console.error(\"Warning: No configurations found for \" + object.name);\n    }\n    if (!conf) {\n      conf = {};\n    }\n    conf.name = object.name;\n    if (object.ellipse) {\n      conf.ellipse = true;\n    }\n    x = Math.floor(object.x);\n    y = Math.floor(object.y);\n    width = Math.floor(object.width);\n    height = Math.floor(object.height);\n    obj = new Ent(x, y, width, height, this, conf);\n    if (configurator) {\n      configurator.apply(obj);\n    }\n    obj.load();\n    return obj;\n  };\n\n  Level.prototype.update = function() {\n    var ent, index, task, _i, _j, _len, _len1, _ref, _ref1;\n\n    _ref = this.entityObjects;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      ent = _ref[_i];\n      ent.update();\n    }\n    _ref1 = this.tasks;\n    for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {\n      task = _ref1[index];\n      task.apply(this);\n    }\n    return this.tasks = [];\n  };\n\n  Level.prototype.updatePhysics = function() {\n    return this.physicsManager.update();\n  };\n\n  return Level;\n\n})(Model);\n\n//@ sourceURL=models/Level.coffee"));
window.require.register("models/MapChanger", Function('exports, require, module', "var Entity, MapChanger, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEntity = require('core/Entity');\n\nmediator = require('mediator');\n\nmodule.exports = MapChanger = (function(_super) {\n  __extends(MapChanger, _super);\n\n  mediator.factory['MapChanger'] = MapChanger;\n\n  function MapChanger(x, y, width, height, owningLevel, settings) {\n    this.onTouchBegin = __bind(this.onTouchBegin, this);    settings.physicsType = 'static';\n    settings.isSensor = true;\n    MapChanger.__super__.constructor.call(this, x, y, width, height, owningLevel, settings);\n  }\n\n  MapChanger.prototype.onTouchBegin = function(body, point, impulse) {\n    var config, _ref;\n\n    if ((_ref = body.GetUserData().ent.name) === 'Player' || _ref === 'PlayerSkeleton') {\n      if (mediator.playWithSounds) {\n        mediator.soundManager.stopAll(config = {\n          sounds: true,\n          backgroundSounds: true\n        });\n      }\n      mediator.nextLevel = this.levelToChangeTo;\n      return mediator.publish('changeLvl');\n    }\n  };\n\n  return MapChanger;\n\n})(Entity);\n\n//@ sourceURL=models/MapChanger.coffee"));
window.require.register("models/Mario", Function('exports, require, module', "var Entity, Mario, Visual, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEntity = require('core/Entity');\n\nVisual = require('core/mixins/Visual');\n\nmediator = require('mediator');\n\nmodule.exports = Mario = (function(_super) {\n  __extends(Mario, _super);\n\n  Mario.include(Visual);\n\n  mediator.factory['Mario'] = Mario;\n\n  function Mario(x, y, width, height, owningLevel, settings) {\n    this.update = __bind(this.update, this);    settings.physicsType = 'static';\n    this._visual_setUp();\n    Mario.__super__.constructor.call(this, x, y, width, height, owningLevel, settings);\n    this._visual_init();\n    this.size.x = width;\n    this.size.y = height;\n  }\n\n  Mario.prototype.update = function() {\n    return Mario.__super__.update.apply(this, arguments);\n  };\n\n  return Mario;\n\n})(Entity);\n\n//@ sourceURL=models/Mario.coffee"));
window.require.register("models/PhysicsManager", Function('exports, require, module', "var Body, BodyDef, CircleShape, DebugDraw, Fixture, FixtureDef, MassData, Model, PHYSICS_LOOP, PhysicsManager, PolygonShape, RevoluteJointDef, Vec2, World, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nModel = require('models/base/model');\n\nmediator = require('mediator');\n\nVec2 = Box2D.Common.Math.b2Vec2;\n\nBodyDef = Box2D.Dynamics.b2BodyDef;\n\nBody = Box2D.Dynamics.b2Body;\n\nFixtureDef = Box2D.Dynamics.b2FixtureDef;\n\nFixture = Box2D.Dynamics.b2Fixture;\n\nWorld = Box2D.Dynamics.b2World;\n\nMassData = Box2D.Collision.Shapes.b2MassData;\n\nPolygonShape = Box2D.Collision.Shapes.b2PolygonShape;\n\nCircleShape = Box2D.Collision.Shapes.b2CircleShape;\n\nDebugDraw = Box2D.Dynamics.b2DebugDraw;\n\nRevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;\n\nPHYSICS_LOOP = 1 / 60;\n\n/*\nContains a map with all physics bodies.\nCan be used by Entities to decide whether they can move to a specific tile.\n@note The PhysicsManager expects only only one physics layer to be present\n*/\n\n\nmodule.exports = PhysicsManager = (function() {\n  PhysicsManager.prototype.world = null;\n\n  PhysicsManager.prototype.Vec2 = Box2D.Common.Math.b2Vec2;\n\n  PhysicsManager.prototype.BodyDef = Box2D.Dynamics.b2BodyDef;\n\n  PhysicsManager.prototype.Body = Box2D.Dynamics.b2Body;\n\n  PhysicsManager.prototype.FixtureDef = Box2D.Dynamics.b2FixtureDef;\n\n  PhysicsManager.prototype.Fixture = Box2D.Dynamics.b2Fixture;\n\n  PhysicsManager.prototype.World = Box2D.Dynamics.b2World;\n\n  PhysicsManager.prototype.MassData = Box2D.Collision.Shapes.b2MassData;\n\n  PhysicsManager.prototype.PolygonShape = Box2D.Collision.Shapes.b2PolygonShape;\n\n  PhysicsManager.prototype.CircleShape = Box2D.Collision.Shapes.b2CircleShape;\n\n  PhysicsManager.prototype.DebugDraw = Box2D.Dynamics.b2DebugDraw;\n\n  PhysicsManager.prototype.RevoluteJointDef = Box2D.Dynamics.Joints.b2RevoluteJointDef;\n\n  /*\n  @private\n  Initializes an instance\n  */\n\n\n  function PhysicsManager(map) {\n    var dCanvas, dCtx, debugDraw;\n\n    this.map = map;\n    this.removeBody = __bind(this.removeBody, this);\n    this.addBody = __bind(this.addBody, this);\n    this.registerBody = __bind(this.registerBody, this);\n    this.addContactListener = __bind(this.addContactListener, this);\n    this.update = __bind(this.update, this);\n    this.createLevelBorder = __bind(this.createLevelBorder, this);\n    this.createStaticBodyWithPolygon = __bind(this.createStaticBodyWithPolygon, this);\n    this.createStaticBodyWithBox = __bind(this.createStaticBodyWithBox, this);\n    this.addBackgroundRigidBodies = __bind(this.addBackgroundRigidBodies, this);\n    this.world = new World(new Vec2(0, 0), false);\n    debugDraw = new Box2D.Dynamics.b2DebugDraw();\n    dCanvas = document.getElementById('debug-canvas');\n    dCtx = dCanvas.getContext('2d');\n    this.createLevelBorder(this.map);\n    dCanvas.width = window.innerWidth / 2 - 100;\n    dCanvas.height = window.innerHeight - 100;\n    debugDraw.SetSprite(dCtx);\n    debugDraw.SetDrawScale(0.5);\n    debugDraw.SetFillAlpha(0.3);\n    debugDraw.SetLineThickness(1);\n    debugDraw.SetFlags(Box2D.Dynamics.b2DebugDraw.e_shapeBit | Box2D.Dynamics.b2DebugDraw.e_jointBit);\n    this.world.SetDebugDraw(debugDraw);\n    this.addBackgroundRigidBodies(this.map);\n  }\n\n  PhysicsManager.prototype.addBackgroundRigidBodies = function() {\n    var layer, object, physicsTile, pkt, tileID, tileIndex, tileSize, vec2, vec2Array, x, y, _i, _len, _ref, _results;\n\n    _ref = this.map.layers;\n    _results = [];\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      layer = _ref[_i];\n      if (layer.name !== 'physics') {\n        continue;\n      }\n      if (layer.type === 'objectgroup') {\n        _results.push((function() {\n          var _j, _len1, _ref1, _results1;\n\n          _ref1 = layer.objects;\n          _results1 = [];\n          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\n            object = _ref1[_j];\n            if (object.polygon) {\n              vec2Array = (function() {\n                var _k, _len2, _ref2, _results2;\n\n                _ref2 = object.polygon;\n                _results2 = [];\n                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n                  vec2 = _ref2[_k];\n                  _results2.push(new Vec2(vec2.x, vec2.y));\n                }\n                return _results2;\n              })();\n              _results1.push(this.createStaticBodyWithPolygon(vec2Array, object.x, object.y));\n            } else {\n              _results1.push(this.createStaticBodyWithBox(object.x, object.y, object.width, object.height));\n            }\n          }\n          return _results1;\n        }).call(this));\n      } else if (layer.type === 'tilelayer') {\n        _results.push((function() {\n          var _j, _len1, _ref1, _results1;\n\n          _ref1 = layer.data;\n          _results1 = [];\n          for (tileIndex = _j = 0, _len1 = _ref1.length; _j < _len1; tileIndex = ++_j) {\n            tileID = _ref1[tileIndex];\n            if (tileID === 0) {\n              continue;\n            }\n            x = (tileIndex % this.map.width) * this.map.tilewidth;\n            y = Math.floor(tileIndex / this.map.width) * this.map.tileheight;\n            pkt = mediator.mapManager.getTilePacket(tileID, this.map.processedTileSets);\n            physicsTile = pkt.px / this.map.tilewidth;\n            tileSize = this.map.tilewidth;\n            if (physicsTile === 0) {\n              _results1.push(this.createStaticBodyWithBox(x, y, tileSize, tileSize));\n            } else if (physicsTile === 1) {\n              vec2Array = [new Vec2(0, tileSize), new Vec2(tileSize, 0), new Vec2(tileSize, tileSize)];\n              _results1.push(this.createStaticBodyWithPolygon(vec2Array, x, y));\n            } else if (physicsTile === 2) {\n              vec2Array = [new Vec2(0, 0), new Vec2(tileSize, tileSize), new Vec2(0, tileSize)];\n              _results1.push(this.createStaticBodyWithPolygon(vec2Array, x, y));\n            } else if (physicsTile === 3) {\n              vec2Array = [new Vec2(0, 0), new Vec2(tileSize, 0), new Vec2(tileSize, tileSize)];\n              _results1.push(this.createStaticBodyWithPolygon(vec2Array, x, y));\n            } else if (physicsTile === 4) {\n              vec2Array = [new Vec2(0, 0), new Vec2(tileSize, 0), new Vec2(0, tileSize)];\n              _results1.push(this.createStaticBodyWithPolygon(vec2Array, x, y));\n            } else {\n              _results1.push(void 0);\n            }\n          }\n          return _results1;\n        }).call(this));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  PhysicsManager.prototype.createStaticBodyWithBox = function(x, y, w, h) {\n    var bgRigidBody, body, fixtureDefinition;\n\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsBox(w / 2, h / 2);\n    bgRigidBody = new BodyDef();\n    bgRigidBody.type = Body.b2_staticBody;\n    bgRigidBody.position.x = x + w / 2;\n    bgRigidBody.position.y = y + h / 2;\n    body = this.registerBody(bgRigidBody);\n    return body.CreateFixture(fixtureDefinition);\n  };\n\n  PhysicsManager.prototype.createStaticBodyWithPolygon = function(vec2Array, x, y) {\n    var bgRigidBody, body, fixtureDefinition;\n\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsArray(vec2Array, vec2Array.length);\n    bgRigidBody = new BodyDef();\n    bgRigidBody.type = Body.b2_staticBody;\n    bgRigidBody.position.x = x;\n    bgRigidBody.position.y = y;\n    body = this.registerBody(bgRigidBody);\n    return body.CreateFixture(fixtureDefinition);\n  };\n\n  /*\n  @todo movo to TiledMap\n  */\n\n\n  PhysicsManager.prototype.createLevelBorder = function() {\n    var body, fixtureDefinition, mapBorder;\n\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsBox(0, this.map.tileheight * this.map.height);\n    mapBorder = new BodyDef();\n    mapBorder.type = Body.b2_staticBody;\n    mapBorder.position.x = 0;\n    mapBorder.position.y = 0;\n    body = this.registerBody(mapBorder, this.world);\n    body.CreateFixture(fixtureDefinition);\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsBox(0, this.map.tileheight * this.map.height);\n    mapBorder = new BodyDef();\n    mapBorder.type = Body.b2_staticBody;\n    mapBorder.position.x = this.map.tilewidth * this.map.width;\n    mapBorder.position.y = 0;\n    body = this.registerBody(mapBorder, this.world);\n    body.CreateFixture(fixtureDefinition);\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsBox(this.map.tilewidth * this.map.width, 0);\n    mapBorder = new BodyDef();\n    mapBorder.type = Body.b2_staticBody;\n    mapBorder.position.x = 0;\n    mapBorder.position.y = 0;\n    body = this.registerBody(mapBorder, this.world);\n    body.CreateFixture(fixtureDefinition);\n    fixtureDefinition = new FixtureDef();\n    fixtureDefinition.shape = new PolygonShape();\n    fixtureDefinition.shape.SetAsBox(this.map.tilewidth * this.map.width, 0);\n    mapBorder = new BodyDef();\n    mapBorder.type = Body.b2_staticBody;\n    mapBorder.position.x = 0;\n    mapBorder.position.y = this.map.tileheight * this.map.height;\n    body = this.registerBody(mapBorder, this.world);\n    return body.CreateFixture(fixtureDefinition);\n  };\n\n  PhysicsManager.prototype.update = function() {\n    return this.world.Step(PHYSICS_LOOP, 10, 10);\n  };\n\n  PhysicsManager.prototype.addContactListener = function(callbacks) {\n    var listener;\n\n    listener = new Box2D.Dynamics.b2ContactListener();\n    if (callbacks.BeginContact) {\n      listener.BeginContact = function(contact) {\n        return callbacks.BeginContact(contact.GetFixtureA().GetBody(), contact.GetFixtureB().GetBody());\n      };\n    }\n    if (callbacks.EndContact) {\n      listener.EndContact = function(contact) {\n        return callbacks.EndContact(contact.GetFixtureA().GetBody(), contact.GetFixtureB().GetBody());\n      };\n    }\n    if (callbacks.PostSolve) {\n      listener.PostSolve = function(contact, impulse) {\n        return callbacks.PostSolve(contact.GetFixtureA().GetBody(), contact.GetFixtureB().GetBody(), impulse.normalImpulses[0]);\n      };\n    }\n    return this.world.SetContactListener(listener);\n  };\n\n  PhysicsManager.prototype.registerBody = function(bodyDef) {\n    var body;\n\n    return body = this.world.CreateBody(bodyDef);\n  };\n\n  PhysicsManager.prototype.addBody = function(entityDef) {\n    var body, bodyDef, fixtureDefinition, halfHeight, halfWidth;\n\n    bodyDef = new BodyDef();\n    halfWidth = Math.floor(entityDef.width / 2);\n    halfHeight = Math.floor(entityDef.height / 2);\n    if (entityDef.type === 'static') {\n      bodyDef.type = Body.b2_staticBody;\n    } else {\n      bodyDef.type = Body.b2_dynamicBody;\n    }\n    bodyDef.position.x = entityDef.x + halfWidth;\n    bodyDef.position.y = entityDef.y + halfHeight;\n    if (entityDef.userData) {\n      bodyDef.userData = entityDef.userData;\n    }\n    body = this.registerBody(bodyDef);\n    fixtureDefinition = new FixtureDef();\n    if (entityDef.isSensor) {\n      fixtureDefinition.isSensor = true;\n    }\n    if (entityDef.ellipse) {\n      fixtureDefinition.shape = new CircleShape();\n      fixtureDefinition.shape.SetRadius(halfWidth);\n    } else {\n      fixtureDefinition.shape = new PolygonShape();\n      fixtureDefinition.shape.SetAsBox(halfWidth, halfHeight);\n    }\n    body.CreateFixture(fixtureDefinition);\n    return body;\n  };\n\n  PhysicsManager.prototype.removeBody = function(obj) {\n    return this.world.DestroyBody(obj);\n  };\n\n  return PhysicsManager;\n\n})();\n\n//@ sourceURL=models/PhysicsManager.coffee"));
window.require.register("models/Player", Function('exports, require, module', "var Entity, Player, Visual, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEntity = require('core/Entity');\n\nVisual = require('core/mixins/Visual');\n\nmediator = require('mediator');\n\n/*\nThe Player\n*/\n\n\nmodule.exports = Player = (function(_super) {\n  __extends(Player, _super);\n\n  Player.include(Visual);\n\n  mediator.factory['Player'] = Player;\n\n  function Player(x, y, width, height, owningLevel, settings) {\n    this.update = __bind(this.update, this);\n    this.onAction = __bind(this.onAction, this);\n    this.onTouchEnd = __bind(this.onTouchEnd, this);\n    this.onTouchBegin = __bind(this.onTouchBegin, this);\n    this.onTouch = __bind(this.onTouch, this);    settings.ellipse = true;\n    this._visual_setUp();\n    Player.__super__.constructor.call(this, x, y, width / 2, height / 2, owningLevel, settings);\n    this._visual_init();\n    this.size.x = width;\n    this.size.y = height;\n  }\n\n  Player.prototype.onTouch = function(otherBody, point, impulse) {\n    var physOwner;\n\n    if (this.physBody == null) {\n      return false;\n    }\n    if (otherBody.GetUserData() == null) {\n      return false;\n    }\n    physOwner = otherBody.GetUserData().ent;\n    if (physOwner != null ? physOwner.killed : void 0) {\n      return false;\n    } else {\n\n    }\n  };\n\n  Player.prototype.onTouchBegin = function(otherBody, point) {\n    var _ref;\n\n    return this.touchingEntity = (_ref = otherBody.GetUserData()) != null ? _ref.ent : void 0;\n  };\n\n  Player.prototype.onTouchEnd = function(otherBody, point) {\n    return this.touchingEntity = null;\n  };\n\n  Player.prototype.onAction = function() {\n    var _ref;\n\n    return (_ref = this.touchingEntity) != null ? _ref.onAction(this) : void 0;\n  };\n\n  Player.prototype.update = function() {\n    return Player.__super__.update.apply(this, arguments);\n  };\n\n  Player.prototype.onPositionChange = function() {\n    return mediator.soundManager.updateBackgroundSounds(this.position);\n  };\n\n  return Player;\n\n})(Entity);\n\n//@ sourceURL=models/Player.coffee"));
window.require.register("models/SoundManager", Function('exports, require, module', "var Model, SoundManager, SoundObj, mediator, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModel = require('models/base/model');\n\nSoundObj = require('models/SoundObj');\n\nmediator = require('mediator');\n\nmodule.exports = SoundManager = (function(_super) {\n  __extends(SoundManager, _super);\n\n  function SoundManager() {\n    this.startAll = __bind(this.startAll, this);\n    this.fade = __bind(this.fade, this);\n    this.updateBackgroundSounds = __bind(this.updateBackgroundSounds, this);\n    this.startThemeSound = __bind(this.startThemeSound, this);\n    this.startBackgroundSounds = __bind(this.startBackgroundSounds, this);\n    this.stopAll = __bind(this.stopAll, this);\n    this.stop = __bind(this.stop, this);\n    this.playSound = __bind(this.playSound, this);\n    this.bufferSounds = __bind(this.bufferSounds, this);\n    this.loadSounds = __bind(this.loadSounds, this);\n    this.getSoundMap = __bind(this.getSoundMap, this);\n    this.initialize = __bind(this.initialize, this);    _ref = SoundManager.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  /*\n  Initialize Soundmanager.\n  Create a new audio context and bind soundManager to mediator\n  */\n\n\n  SoundManager.prototype.initialize = function() {\n    SoundManager.__super__.initialize.apply(this, arguments);\n    mediator.soundManager = this;\n    if (typeof webkitAudioContext !== \"undefined\" && webkitAudioContext !== null) {\n      this.audioContext = new webkitAudioContext();\n    } else {\n      mediator.playWithSounds = false;\n    }\n    this.globalSoundList = {};\n    return this.lastLevelTheme = \"\";\n  };\n\n  /*\n  @param [Object]\n  Initializes soundMap for backgroundSounds\n  */\n\n\n  SoundManager.prototype.getSoundMap = function(map) {\n    var layer, soundMap, tileID, tileIndex, x, y, _i, _j, _k, _len, _len1, _ref1, _ref2, _ref3;\n\n    soundMap = [];\n    for (x = _i = 0, _ref1 = map.width - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; x = 0 <= _ref1 ? ++_i : --_i) {\n      soundMap[x] = (function() {\n        var _j, _ref2, _results;\n\n        _results = [];\n        for (y = _j = 0, _ref2 = map.height - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; y = 0 <= _ref2 ? ++_j : --_j) {\n          _results.push([]);\n        }\n        return _results;\n      })();\n    }\n    _ref2 = map.layers;\n    for (_j = 0, _len = _ref2.length; _j < _len; _j++) {\n      layer = _ref2[_j];\n      if (layer.name !== 'sound') {\n        continue;\n      }\n      _ref3 = layer.data;\n      for (tileIndex = _k = 0, _len1 = _ref3.length; _k < _len1; tileIndex = ++_k) {\n        tileID = _ref3[tileIndex];\n        if (tileID === 0) {\n          continue;\n        }\n        x = tileIndex % map.width;\n        y = Math.floor(tileIndex / map.width);\n        soundMap[x][y].push(layer.properties);\n      }\n    }\n    return soundMap;\n  };\n\n  /*\n  @param [Array]\n  @param [function]\n  Load sounds\n  */\n\n\n  SoundManager.prototype.loadSounds = function(mapSounds, callback) {\n    var sound, _i, _j, _len, _len1, _ref1, _ref2;\n\n    this.soundCount = mapSounds.sounds.length + mapSounds.backgroundSounds.length + 1;\n    _ref1 = mapSounds.sounds;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      sound = _ref1[_i];\n      if (this.globalSoundList[sound] == null) {\n        this.globalSoundList[sound] = new SoundObj;\n        mediator.std.xhrGet(mapSounds.prefix + sound, this.bufferSounds, 'arraybuffer', sound, callback);\n      } else {\n        callback();\n      }\n    }\n    _ref2 = mapSounds.backgroundSounds;\n    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n      sound = _ref2[_j];\n      if (this.globalSoundList[sound] == null) {\n        this.globalSoundList[sound] = new SoundObj;\n        mediator.std.xhrGet(mapSounds.prefix + sound, this.bufferSounds, 'arraybuffer', sound, callback);\n      } else {\n        callback();\n      }\n    }\n    if (this.globalSoundList[mapSounds.theme] == null) {\n      this.globalSoundList[mapSounds.theme] = new SoundObj;\n      return mediator.std.xhrGet(mapSounds.prefix + mapSounds.theme, this.bufferSounds, 'arraybuffer', mapSounds.theme, callback);\n    } else {\n      return callback();\n    }\n  };\n\n  /*\n  @param [xhrGethttp-request]\n  Buffer the sound we just got from xhrGet request and put it into the corresponding SourceNode in the audio context\n  @note later trigger the observer event for 'all sounds loaded'\n  */\n\n\n  SoundManager.prototype.bufferSounds = function(event) {\n    var buffer, callback, request, sound,\n      _this = this;\n\n    request = event.target;\n    sound = request.additionalAttributes[0];\n    callback = request.additionalAttributes[1];\n    return buffer = this.audioContext.decodeAudioData(request.response, function(buffer) {\n      _this.globalSoundList[sound].buffer = buffer;\n      if (debug) {\n        console.log(sound + ' loaded');\n      }\n      return typeof callback === \"function\" ? callback() : void 0;\n    });\n  };\n\n  /*\n  @param [String]\n  @param [Double]\n  @param [Bool]\n  Play sound of list with volume and loop\n  */\n\n\n  SoundManager.prototype.playSound = function(sound, volume, loops) {\n    var sourceNode;\n\n    if (this.globalSoundList[sound].isPlaying !== true) {\n      sourceNode = this.audioContext.createBufferSource();\n      sourceNode.buffer = this.globalSoundList[sound].buffer;\n      sourceNode.loop = loops;\n      sourceNode.gain.value = volume;\n      sourceNode.connect(this.audioContext.destination);\n      this.globalSoundList[sound].sourceNode = sourceNode;\n      sourceNode.start(0);\n      return this.globalSoundList[sound].isPlaying = true;\n    } else {\n      return this.fade(sound, volume, 0);\n    }\n  };\n\n  /*\n  @param [String]\n  Stop sound\n  */\n\n\n  SoundManager.prototype.stop = function(sound) {\n    if (this.globalSoundList[sound].isPlaying) {\n      this.globalSoundList[sound].sourceNode.stop(this.audioContext.currentTime);\n      this.globalSoundList[sound].isPlaying = false;\n      if (debug) {\n        return console.log(sound + '.mp3 stopped');\n      }\n    }\n  };\n\n  /*\n  @param [Object]\n  Stop all with config specified sounds in active level\n  */\n\n\n  SoundManager.prototype.stopAll = function(config) {\n    var name, sound, soundsToStop, _i, _j, _len, _len1, _ref1, _ref2, _ref3, _results;\n\n    soundsToStop = [];\n    if (config != null ? config.themeSound : void 0) {\n      soundsToStop.push(mediator.getActiveLevel().themeSound);\n    } else {\n      this.lastLevelTheme = mediator.getActiveLevel().themeSound;\n    }\n    if (config != null ? config.backgroundSounds : void 0) {\n      _ref1 = mediator.getActiveLevel().backgroundSoundList;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        sound = _ref1[_i];\n        soundsToStop.push(sound);\n      }\n    }\n    if (config != null ? config.sounds : void 0) {\n      _ref2 = mediator.getActiveLevel().mapSoundList;\n      for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n        sound = _ref2[_j];\n        soundsToStop.push(sound);\n      }\n    }\n    _ref3 = this.globalSoundList;\n    _results = [];\n    for (name in _ref3) {\n      sound = _ref3[name];\n      if ((soundsToStop.indexOf(name)) !== -1) {\n        _results.push(this.stop(name));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  /*\n  Start all background sounds in backgroundSoundList of active level with gain = 0, i.e. muted\n  */\n\n\n  SoundManager.prototype.startBackgroundSounds = function() {\n    var sound, _i, _len, _ref1, _results;\n\n    _ref1 = mediator.getActiveLevel().backgroundSoundList;\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      sound = _ref1[_i];\n      _results.push(this.playSound(sound, 0, true));\n    }\n    return _results;\n  };\n\n  /*\n  Start theme of level\n  Fade the if it stays the same on level change\n  */\n\n\n  SoundManager.prototype.startThemeSound = function() {\n    var intensity, theme;\n\n    theme = mediator.getActiveLevel().themeSound;\n    intensity = mediator.getActiveLevel().themeIntensity;\n    if (this.lastLevelTheme === theme) {\n      return this.fade(theme, intensity, 0);\n    } else {\n      if (this.globalSoundList[this.lastLevelTheme] != null) {\n        this.stop(this.lastLevelTheme);\n      }\n      return this.playSound(theme, intensity, true);\n    }\n  };\n\n  /*\n  @param [Object]\n  Look for backgroundSounds to play on the player position on the soundMap and update their gain\n  @todo maybe look for an optimization here\n  */\n\n\n  SoundManager.prototype.updateBackgroundSounds = function(PlayerPosition) {\n    var lvl, sound, _i, _j, _len, _len1, _ref1, _ref2, _results;\n\n    this.backgroundSoundsToPlay = [];\n    lvl = mediator.getActiveLevel();\n    _ref1 = lvl.soundMap[Math.floor(PlayerPosition.x / 32)][Math.floor(PlayerPosition.y / 32)];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      sound = _ref1[_i];\n      this.fade(sound.type + '.mp3', sound.intensity / 100, 1);\n      this.backgroundSoundsToPlay.push(sound.type + '.mp3');\n    }\n    _ref2 = lvl.backgroundSoundList;\n    _results = [];\n    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n      sound = _ref2[_j];\n      if (this.backgroundSoundsToPlay.indexOf(sound) === -1) {\n        _results.push(this.fade(sound, 0, 1));\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  /*\n  @param [String]\n  @param [Double]\n  @param [Double]\n  Fade sound to volume\n  */\n\n\n  SoundManager.prototype.fade = function(sound, volume, interval) {\n    return this.globalSoundList[sound].sourceNode.gain.setTargetAtTime(volume, this.audioContext.currentTime, interval);\n  };\n\n  SoundManager.prototype.startAll = function() {\n    this.startThemeSound();\n    this.startBackgroundSounds();\n    return this.updateBackgroundSounds(mediator.getActiveLevel().player.position);\n  };\n\n  return SoundManager;\n\n})(Model);\n\n//@ sourceURL=models/SoundManager.coffee"));
window.require.register("models/SoundObj", Function('exports, require, module', "var Model, SoundObj, mediator, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModel = require('models/base/model');\n\nmediator = require('mediator');\n\nmodule.exports = SoundObj = (function(_super) {\n  __extends(SoundObj, _super);\n\n  function SoundObj() {\n    this.initialize = __bind(this.initialize, this);    _ref = SoundObj.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  SoundObj.prototype.initialize = function() {\n    this.sourceNode = null;\n    this.gainNode = null;\n    this.buffer = null;\n    return this.isPlaying = false;\n  };\n\n  return SoundObj;\n\n})(Model);\n\n//@ sourceURL=models/SoundObj.coffee"));
window.require.register("models/Std", Function('exports, require, module', "var Model, Std, mediator, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __slice = [].slice;\n\nModel = require('models/base/model');\n\nmediator = require('mediator');\n\nmodule.exports = Std = (function(_super) {\n  __extends(Std, _super);\n\n  function Std() {\n    _ref = Std.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Std.prototype.initialize = function() {\n    return mediator.std = this;\n  };\n\n  /*\n  Starts a XMLHttpRequest and calls the given callback when finished loading.\n  @param [String] reqUri URI to the file to be loaded\n  @param [Function] callback Callback function\n  */\n\n\n  Std.prototype.xhrGet = function() {\n    var callback, reqUri, rest, xhr;\n\n    reqUri = arguments[0], callback = arguments[1], rest = 3 <= arguments.length ? __slice.call(arguments, 2) : [];\n    xhr = new XMLHttpRequest();\n    if (rest.length !== 0) {\n      xhr.responseType = rest[0];\n    }\n    xhr.additionalAttributes = rest.splice(1);\n    xhr.open('GET', reqUri, true);\n    xhr.onload = callback;\n    return xhr.send();\n  };\n\n  return Std;\n\n})(Model);\n\n//@ sourceURL=models/Std.coffee"));
window.require.register("models/TILEDMap", Function('exports, require, module', "/*\nLoads and renders a level.\n@note emits `map:rendered` event when map ist fully rendered\n*/\n\nvar TILEDMap;\n\nmodule.exports = TILEDMap = (function() {\n  function TILEDMap() {}\n\n  /*\n  @private\n  Parses TILED map editor json data\n  @param [Object] mapTiledObject the parsed TILED map editor map data\n  */\n\n\n  TILEDMap.parseMapJSON = function(mapTiledObject, callback) {\n    var imgLoadCount, tileset, tilesets;\n\n    if (debug) {\n      console.log('Start loading atlasses');\n    }\n    imgLoadCount = mapTiledObject.tilesets.length;\n    return tilesets = (function() {\n      var _i, _len, _ref, _results,\n        _this = this;\n\n      _ref = mapTiledObject.tilesets;\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        tileset = _ref[_i];\n        _results.push(this.createTileSet(tileset, function() {\n          imgLoadCount--;\n          if (imgLoadCount <= 0) {\n            return callback(tilesets);\n          } else {\n            if (debug) {\n              return console.log(\"\" + imgLoadCount + \" tile sets to go. Hang in there!\");\n            }\n          }\n        }));\n      }\n      return _results;\n    }).call(TILEDMap);\n  };\n\n  /*\n  @private\n  Loads an atlas referenced from the map file and returns it\n  @param [Object] tileset a tileset from the map json\n  @return [Object] most important data from that tileset\n  @example The returned Object:\n    ts =\n      firstgid: …    # look at https://github.com/bjorn/tiled/wiki/TMX-Map-Format\n      image: …       # the loaded atlas image\n      imageheight: … # the atlas's height in pixels\n      imagewidth: …  # the atlas's width in pixels\n      name: …        # the atlas's name\n      numXTiles: …   # number of tiles in x direction\n      numYTiles: …   # number of tiles in y direction\n  */\n\n\n  TILEDMap.createTileSet = function(tileset, callback) {\n    var img, ts;\n\n    img = new Image();\n    img.onload = function() {\n      return callback();\n    };\n    img.src = 'atlases/' + tileset.image.replace(/^.*[\\\\\\/]/, '');\n    return ts = {\n      firstgid: tileset.firstgid,\n      image: img,\n      imageheight: tileset.imageheight,\n      imagewidth: tileset.imagewidth,\n      tileheight: tileset.tileheight,\n      tilewidth: tileset.tilewidth,\n      name: tileset.name,\n      numXTiles: Math.floor(tileset.imagewidth / (tileset.tilewidth + tileset.spacing)),\n      numYTiles: Math.floor(tileset.imageheight / (tileset.tileheight + tileset.spacing)),\n      spacing: tileset.spacing\n    };\n  };\n\n  /*\n  @private\n  Takes a tile ID and returns the tile's atlas and position\n  @param [Integer] tileIndex a tile ID\n  @return [Object] the tile's atlas and position\n  @example the returned Object:\n    pkt =\n      img: … # the atlas where the tile is situated\n      px: …  # x value of the top left corner in pixels\n      py: …  # y value of the top left corner in pixels\n  */\n\n\n  TILEDMap.getTilePacket = function(tileIndex, tileSets) {\n    var lTileX, lTileY, localIdx, pkt, tile, _i;\n\n    pkt = {\n      img: null,\n      px: 0,\n      py: 0\n    };\n    tile = null;\n    for (_i = tileSets.length - 1; _i >= 0; _i += -1) {\n      tile = tileSets[_i];\n      if (tile.firstgid <= tileIndex) {\n        break;\n      }\n    }\n    pkt.img = tile.image;\n    localIdx = tileIndex - tile.firstgid;\n    lTileX = Math.floor(localIdx % tile.numXTiles);\n    lTileY = Math.floor(localIdx / tile.numXTiles);\n    pkt.py = lTileY * (tile.tileheight + tile.spacing) + tile.spacing;\n    pkt.px = lTileX * (tile.tilewidth + tile.spacing) + tile.spacing;\n    return pkt;\n  };\n\n  /*\n  Renders the map into it's own off screen canvas.\n  This means the whol background can be drawn with one single draw\n  call instead of hundreads.\n  */\n\n\n  TILEDMap.render = function(mapTiledObject, tilesets) {\n    var canvas, coords, ctx, layer, tID, tPKT, tileIDX, _i, _j, _len, _len1, _ref, _ref1;\n\n    canvas = document.createElement('canvas');\n    ctx = canvas.getContext('2d');\n    canvas.width = mapTiledObject.width * mapTiledObject.tilewidth;\n    canvas.height = mapTiledObject.height * mapTiledObject.tileheight;\n    if (debug) {\n      console.log('Finish loading atlasses');\n    }\n    _ref = mapTiledObject.layers;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      layer = _ref[_i];\n      if (layer.type !== 'tilelayer') {\n        continue;\n      }\n      if (layer.name === 'sound' || layer.name === 'physics') {\n        continue;\n      }\n      _ref1 = layer.data;\n      for (tileIDX = _j = 0, _len1 = _ref1.length; _j < _len1; tileIDX = ++_j) {\n        tID = _ref1[tileIDX];\n        if (tID === 0) {\n          continue;\n        }\n        tPKT = TILEDMap.getTilePacket(tID, tilesets);\n        coords = {\n          x: (tileIDX % mapTiledObject.width) * mapTiledObject.tilewidth,\n          y: Math.floor(tileIDX / mapTiledObject.width) * mapTiledObject.tileheight\n        };\n        ctx.drawImage(tPKT.img, tPKT.px, tPKT.py, mapTiledObject.tilewidth, mapTiledObject.tileheight, coords.x, coords.y, mapTiledObject.tilewidth, mapTiledObject.tileheight);\n      }\n    }\n    return canvas;\n  };\n\n  TILEDMap.parse = function(mapTiledObject, callback) {\n    return TILEDMap.parseMapJSON(mapTiledObject, function(tilesets) {\n      return callback(TILEDMap.render(mapTiledObject, tilesets), tilesets);\n    });\n  };\n\n  return TILEDMap;\n\n}).call(this);\n\n//@ sourceURL=models/TILEDMap.coffee"));
window.require.register("models/Yeti", Function('exports, require, module', "var Entity, Movable, Visual, Yeti, mediator,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nEntity = require('core/Entity');\n\nVisual = require('core/mixins/Visual');\n\nMovable = require('core/mixins/Movable');\n\nmediator = require('mediator');\n\nmodule.exports = Yeti = (function(_super) {\n  __extends(Yeti, _super);\n\n  Yeti.include(Visual);\n\n  Yeti.include(Movable);\n\n  mediator.factory['Yeti'] = Yeti;\n\n  function Yeti(x, y, width, height, owningLevel, settings) {\n    this.onAction = __bind(this.onAction, this);\n    this.update = __bind(this.update, this);\n    this.onTouchEnd = __bind(this.onTouchEnd, this);\n    this.onTouch = __bind(this.onTouch, this);\n    this.onTouchBegin = __bind(this.onTouchBegin, this);    settings.ellipse = true;\n    this._visual_setUp();\n    this._movable_setUp();\n    Yeti.__super__.constructor.call(this, x, y, width / 2, height / 2, owningLevel, settings);\n    this._visual_init();\n    this._movable_init();\n    this.size.x = width;\n    this.size.y = height;\n    /*\n      TODO: uncomment properties if needed\n    */\n\n    /*\n      Is the object Static or Dynamic?\n    */\n\n    settings.physicsType = 'dynamic';\n    /*\n      If the entity is a Sensor it means that the player can walk through it\n    */\n\n    this.physBody.SetLinearVelocity(new this.level.physicsManager.Vec2(0, 0));\n  }\n\n  Yeti.prototype.onTouchBegin = function(body, point) {\n    var _ref;\n\n    this.spriteState.moving = true;\n    if (((_ref = body.GetUserData()) != null ? _ref.ent.name : void 0) === 'Player') {\n      return this.makeMeStatic();\n    }\n  };\n\n  Yeti.prototype.onTouch = function(body, point, impulse) {};\n\n  Yeti.prototype.onTouchEnd = function(body, point) {\n    var _ref;\n\n    this.spriteState.moving = false;\n    if (((_ref = body.GetUserData()) != null ? _ref.ent.name : void 0) === 'Player') {\n      return this.makeMeDynamic();\n    }\n  };\n\n  Yeti.prototype.update = function() {\n    /*\n      synchronize the visial position with the physical one\n    */\n    return Yeti.__super__.update.apply(this, arguments);\n  };\n\n  Yeti.prototype.onAction = function(player) {\n    return mediator.dialogManager.showDialog({\n      \"text\": \"PIKACHU!!!\",\n      \"options\": [\"Yeah...right.\"]\n    });\n  };\n\n  return Yeti;\n\n})(Entity);\n\n//@ sourceURL=models/Yeti.coffee"));
window.require.register("models/base/collection", Function('exports, require, module', "var Chaplin, Collection, Model, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nModel = require('models/base/model');\n\nmodule.exports = Collection = (function(_super) {\n  __extends(Collection, _super);\n\n  function Collection() {\n    _ref = Collection.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  Collection.prototype.model = Model;\n\n  return Collection;\n\n})(Chaplin.Collection);\n\n//@ sourceURL=models/base/collection.coffee"));
window.require.register("models/base/model", Function('exports, require, module', "var Chaplin, Model, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nmodule.exports = Model = (function(_super) {\n  __extends(Model, _super);\n\n  function Model() {\n    _ref = Model.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  return Model;\n\n})(Chaplin.Model);\n\n//@ sourceURL=models/base/model.coffee"));
window.require.register("models/home", Function('exports, require, module', "var Home, Model, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nModel = require('models/base/model');\n\nmodule.exports = Home = (function(_super) {\n  __extends(Home, _super);\n\n  function Home() {\n    _ref = Home.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  return Home;\n\n})(Model);\n\n//@ sourceURL=models/home.coffee"));
window.require.register("routes", Function('exports, require, module', "module.exports = function(match) {\n  match('', 'home#index');\n  match('index.html', 'home#index');\n  match('u/6045251/shiny-wight/index.html', 'home#index');\n  return match('shiny-wight/index.html', 'home#index');\n};\n\n//@ sourceURL=routes.coffee"));
window.require.register("views/base/collection-view", Function('exports, require, module', "var Chaplin, CollectionView, View, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nView = require('views/base/view');\n\nmodule.exports = CollectionView = (function(_super) {\n  __extends(CollectionView, _super);\n\n  function CollectionView() {\n    _ref = CollectionView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  CollectionView.prototype.getTemplateFunction = View.prototype.getTemplateFunction;\n\n  return CollectionView;\n\n})(Chaplin.CollectionView);\n\n//@ sourceURL=views/base/collection-view.coffee"));
window.require.register("views/base/view", Function('exports, require, module', "var Chaplin, View, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nrequire('lib/view-helper');\n\nmodule.exports = View = (function(_super) {\n  __extends(View, _super);\n\n  function View() {\n    _ref = View.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  View.prototype.getTemplateFunction = function() {\n    return this.template;\n  };\n\n  return View;\n\n})(Chaplin.View);\n\n//@ sourceURL=views/base/view.coffee"));
window.require.register("views/home-page-view", Function('exports, require, module', "var DialogManager, Event, HomePageView, InputManager, Level, MapChanger, Mario, PHYSICS_LOOP, Player, RENDER_LOOP, SoundManager, Std, Vec2, View, Yeti, mediator, _ref,\n  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __slice = [].slice;\n\nView = require('views/base/view');\n\nInputManager = require('models/InputManager');\n\nSoundManager = require('models/SoundManager');\n\nDialogManager = require('models/DialogManager');\n\nmediator = require('mediator');\n\nStd = require('models/Std');\n\nLevel = require('models/Level');\n\nPlayer = require('models/Player');\n\nMapChanger = require('models/MapChanger');\n\nEvent = require('models/Event');\n\nYeti = require('models/Yeti');\n\nMario = require('models/Mario');\n\nVec2 = Box2D.Common.Math.b2Vec2;\n\nPHYSICS_LOOP = 1000 / 60;\n\nRENDER_LOOP = 1000 / 25;\n\nmodule.exports = HomePageView = (function(_super) {\n  __extends(HomePageView, _super);\n\n  function HomePageView() {\n    this.draw = __bind(this.draw, this);\n    this._handleAction = __bind(this._handleAction, this);\n    this.handleInput = __bind(this.handleInput, this);\n    this.doTheWork = __bind(this.doTheWork, this);\n    this.setup = __bind(this.setup, this);\n    this.loadNextLevels = __bind(this.loadNextLevels, this);\n    this.loadLevel = __bind(this.loadLevel, this);    _ref = HomePageView.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  HomePageView.prototype.autoRender = true;\n\n  HomePageView.prototype.className = 'home-page';\n\n  HomePageView.prototype.container = '#page-container';\n\n  HomePageView.prototype.initialize = function(options) {\n    var level, now,\n      _this = this;\n\n    HomePageView.__super__.initialize.apply(this, arguments);\n    new Std();\n    mediator.homepageview = this;\n    this.handleAction = _.debounce(this._handleAction, 50, true);\n    this.canvas = document.getElementById('game-canvas');\n    this.ctx = this.canvas.getContext('2d');\n    if (debug) {\n      window.homepageview = this;\n    }\n    if (debug) {\n      window.mediator = mediator;\n    }\n    mediator.playWithSounds = true;\n    if (debug) {\n      mediator.playWithSounds = confirm(\"Load Sounds?\");\n    }\n    if (mediator.playWithSounds) {\n      this.soundManager = new SoundManager();\n    }\n    this.inputManager = new InputManager();\n    this.dialogManager = new DialogManager();\n    now = Date.now();\n    this.lastPhysicsUpdate = now;\n    this.lastRenderUpdate = now;\n    this.subscribeEvent('changeLvl', function() {\n      if (debug) {\n        console.log('change to ' + mediator.nextLevel);\n      }\n      return _this.setup(mediator.nextLevel);\n    });\n    level = 'level1';\n    return this.loadLevel(level, function() {\n      _this.setup(level);\n      return window.requestAnimationFrame(_this.doTheWork);\n    });\n  };\n\n  HomePageView.prototype.loadLevel = function() {\n    var level, rest,\n      _this = this;\n\n    level = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];\n    if (mediator.levels[level] != null) {\n      return;\n    }\n    return mediator.levels[level] = new Level(level, function() {\n      return typeof rest[0] === \"function\" ? rest[0]() : void 0;\n    });\n  };\n\n  HomePageView.prototype.loadNextLevels = function() {\n    var entity, _i, _len, _ref1, _results;\n\n    _ref1 = mediator.getActiveLevel().entityObjects;\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      entity = _ref1[_i];\n      if (entity.levelToChangeTo == null) {\n        continue;\n      }\n      _results.push(this.loadLevel(entity.levelToChangeTo));\n    }\n    return _results;\n  };\n\n  HomePageView.prototype.setup = function(level) {\n    var lvl,\n      _this = this;\n\n    lvl = mediator.levels[level];\n    if (lvl.loadCompleted) {\n      mediator.dialogManager.hideDialog();\n      mediator.activeLevel = level;\n      if (!lvl.setupped) {\n        lvl.setup();\n      }\n      if (mediator.playWithSounds) {\n        this.soundManager.startAll();\n      }\n      return this.loadNextLevels();\n    } else {\n      if (!mediator.dialogManager.isDialog()) {\n        mediator.dialogManager.showDialog({\n          text: \"Sorry, I still need to load some damn cool sound, so please hang in there!\"\n        });\n      }\n      return setTimeout(function() {\n        return _this.setup(level);\n      }, 500);\n    }\n  };\n\n  HomePageView.prototype.doTheWork = function() {\n    var lvl, renderDelte, timeNow, timeToRender;\n\n    window.requestAnimationFrame(this.doTheWork);\n    timeNow = Date.now();\n    lvl = mediator.getActiveLevel();\n    while (this.lastPhysicsUpdate < timeNow) {\n      if (timeNow - this.lastPhysicsUpdate > 1000) {\n        this.lastPhysicsUpdate = timeNow;\n      } else {\n        this.handleInput();\n        lvl.updatePhysics();\n        lvl.update();\n        this.lastPhysicsUpdate += PHYSICS_LOOP;\n      }\n    }\n    renderDelte = timeNow - this.lastRenderUpdate - RENDER_LOOP;\n    if (renderDelte > 0) {\n      this.draw();\n      if (debug) {\n        lvl.physicsManager.world.DrawDebugData();\n      }\n      this.lastRenderUpdate = timeNow;\n    }\n    if (debug) {\n      timeToRender = Date.now() - timeNow;\n      if (timeToRender > 40) {\n        return console.log(\"Took \" + timeToRender + \" ms to render frame.\");\n      }\n    }\n  };\n\n  HomePageView.prototype.handleInput = function() {\n    var actions, moveDir, placeholder, player;\n\n    actions = this.inputManager.get('actions');\n    moveDir = new Vec2(0, 0);\n    player = mediator.getActiveLevel().player;\n    if (actions['move-up']) {\n      moveDir.y -= 1;\n      player.spriteState.viewDirection = 0;\n      if (mediator.dialogManager.isDialog()) {\n        mediator.dialogManager.moveSelectionUp();\n      }\n    }\n    if (actions['move-down']) {\n      moveDir.y += 1;\n      player.spriteState.viewDirection = 2;\n      if (mediator.dialogManager.isDialog()) {\n        mediator.dialogManager.moveSelectionDown();\n      }\n    }\n    if (actions['move-left']) {\n      moveDir.x -= 1;\n      player.spriteState.viewDirection = 3;\n    }\n    if (actions['move-right']) {\n      moveDir.x += 1;\n      player.spriteState.viewDirection = 1;\n    }\n    if (actions['interact']) {\n      this.handleAction();\n    }\n    if (actions['cancel']) {\n      placeholder = true;\n    }\n    if (moveDir.LengthSquared() && !mediator.blockInput) {\n      moveDir.Normalize();\n      moveDir.Multiply(player.velocity);\n      player.physBody.SetLinearVelocity(moveDir);\n      if (mediator.playWithSounds) {\n        player.onPositionChange();\n      }\n      return player.spriteState.moving = true;\n    } else {\n      player.physBody.SetLinearVelocity(new Vec2(0, 0));\n      return player.spriteState.moving = false;\n    }\n  };\n\n  HomePageView.prototype._handleAction = function() {\n    var player;\n\n    if (mediator.dialogManager.isDialog()) {\n      return mediator.dialogManager.chooseCurrentSelection();\n    } else {\n      player = mediator.getActiveLevel().player;\n      return player.onAction();\n    }\n  };\n\n  HomePageView.prototype.draw = function() {\n    var dh, dw, dx, dy, entity, lvl, numXTiles, numYTiles, pixelSize, pos, radiusOfSight, sh, sw, sx, sy, tileSize, _i, _len, _ref1;\n\n    lvl = mediator.getActiveLevel();\n    numXTiles = lvl.mapTiledObject.width;\n    numYTiles = lvl.mapTiledObject.height;\n    tileSize = {\n      x: lvl.mapTiledObject.tileheight,\n      y: lvl.mapTiledObject.tilewidth\n    };\n    pixelSize = {\n      x: numXTiles * tileSize.x,\n      y: numYTiles * tileSize.y\n    };\n    pos = lvl.player.position;\n    radiusOfSight = 6 * tileSize.x;\n    sx = pos.x - radiusOfSight;\n    sy = pos.y - radiusOfSight;\n    sw = dw = sh = dh = radiusOfSight * 2 + tileSize.x;\n    dx = 0;\n    dy = 0;\n    if (sx + sw > pixelSize.x) {\n      sx = pixelSize.x - sw;\n    }\n    if (sy + sh > pixelSize.y) {\n      sy = pixelSize.y - sh;\n    }\n    if (sx < 0) {\n      sx = 0;\n    }\n    if (sy < 0) {\n      sy = 0;\n    }\n    if (sw - sx > pixelSize.x) {\n      sw = dw = pixelSize.x;\n    }\n    if (sh - sy > pixelSize.y) {\n      sh = dh = pixelSize.y;\n    }\n    this.canvas.width = sw;\n    this.canvas.height = sh;\n    this.ctx.drawImage(lvl.mapCanvas, sx, sy, sw, sh, dx, dy, dw, dh);\n    _ref1 = lvl.entityObjects;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      entity = _ref1[_i];\n      if (entity.visual != null) {\n        entity.render(this.ctx, sx, sy);\n      }\n    }\n    return lvl.player.render(this.ctx, sx, sy);\n  };\n\n  return HomePageView;\n\n})(View);\n\n//@ sourceURL=views/home-page-view.coffee"));
window.require.register("views/layout", Function('exports, require, module', "var Chaplin, Layout, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nChaplin = require('chaplin');\n\nmodule.exports = Layout = (function(_super) {\n  __extends(Layout, _super);\n\n  function Layout() {\n    _ref = Layout.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  return Layout;\n\n})(Chaplin.Layout);\n\n//@ sourceURL=views/layout.coffee"));
